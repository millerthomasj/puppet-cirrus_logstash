filter {
  if [type] == "uwsgi_format" {
    multiline {
      negate => true
      pattern => "(?:^\[pid|^%{TIMESTAMP_ISO8601}|^%{DAY} %{MONTH})"
      what => "previous"
      stream_identity => "%{host}.%{source}"
    }
    grok {
      match => [
        "message", "(?m)^\[pid: %{NUMBER:pid}\|app: %{NUMBER:app}\|req: %{NUMBER:managed_requests}/%{NUMBER:total_requests}\] %{IP:remote_addr}, %{IP:local_addr} \(\) \{%{NUMBER:cgi_vars} vars in %{NUMBER:cgi_vars_size} bytes\} \[%{DAY:day} %{MONTH:month}?%{SPACE}?%{MONTHDAY:monthday} %{TIME:time} %{YEAR:year}\] %{GREEDYDATA:logmessage}",
        "message", "(?m)^\[pid: %{NUMBER:pid}\|app: %{NUMBER:app}\|req: %{NUMBER:managed_requests}/%{NUMBER:total_requests}\] %{IP:remote_addr} \(\) \{%{NUMBER:cgi_vars} vars in %{NUMBER:cgi_vars_size} bytes\} \[%{DAY:day} %{MONTH:month}?%{SPACE}?%{MONTHDAY:monthday} %{TIME:time} %{YEAR:year}\] %{GREEDYDATA:logmessage}",
        "message", "^%{TIMESTAMP_ISO8601:logdate}%{SPACE}%{NUMBER:pid}?%{SPACE}?(?<loglevel>AUDIT|CRITICAL|DEBUG|INFO|TRACE|WARNING|ERROR) \[?\b%{NOTSPACE:module}\b\]?%{SPACE}?%{GREEDYDATA:logmessage}?",
        "message", "^%{DAY:day} %{MONTH:month}?%{SPACE}?%{MONTHDAY:monthday} %{TIME:time} %{YEAR:year} - %{GREEDYDATA:logmessage}"
      ]
      add_field => { "received_at" => "%{@timestamp}" }
      overwrite => [ "message" ]
    }
    if [year] =~ /.+/ {
      mutate {
        add_field => { "logdate" => "%{day} %{month} %{monthday} %{time} %{year}" }
        remove_field => [ "day", "month", "monthday", "time", "year" ]
      }
    }
    if ! [loglevel] {
      mutate { add_field => { "loglevel" => "info" } }
    }
    <% if scope.lookupvar('cirrus_logstash::openstack_filters_allow_debug') == false %>
    # Remove DEBUG logs to reduce the amount of data that needs to be processed.
    if [loglevel] == "DEBUG" {
      drop {}
    }
    <% end %>

    if ! ("_grokparsefailure" in [tags]) {
      if "keystone_main_uwsgi" in [fields][tags] {
        grok {
          match => [
            "logmessage", "^\[%{DATA}: (?<keystone_status>Successful Login) : %{DATA:keystone_request_id} : \(%{WORD:keystone_request_method}\) %{PATH:keystone_request_path} : %{IP:keystone_forwarded_for} : %{IP:keystone_remote_addr} : %{NOTSPACE} :%{DATA}: %{DATA:keystone_user_id} : ?%{DATA:keystone_project_id} : ?%{GREEDYDATA:keystone_roles}",
            "logmessage", "^\[%{DATA:keystone_request_id} %{DATA}\] (?<keystone_status>Authorization failed.)%{DATA}%{IP:keystone_remote_addr}"
          ]
          tag_on_failure => []
        }
        if ! ("_grokparsefailure" in [tags]) {
          mutate {
            remove_field => [ "keystone_request_method", "keystone_request_path", "keystone_forwarded_for" ]
            rename => { "keystone_status" => "[fields][keystone][status]" }
            rename => { "keystone_request_id" => "[fields][keystone][request_id]" }
            rename => { "keystone_remote_addr" => "[fields][keystone][remote_addr]" }
            rename => { "keystone_user_id" => "[fields][keystone][user_id]" }
            rename => { "keystone_project_id" => "[fields][keystone][project_id]" }
            rename => { "keystone_roles" => "[fields][keystone][roles]" }
          }
          if ("Successful Login" in [fields][keystone][status]) {
            mutate {
              replace => { "[fields][keystone][status]" => "success" }
            }
          } else {
            mutate {
              replace => { "[fields][keystone][status]" => "failed" }
            }
          }
        }
        else {
          mutate {
            remove_tag => [ "_grokparsefailure" ]
          }
        }
      }
      date {
        match => [ "logdate",
                   "yyyy-MM-dd HH:mm:ss.SSS",
                   "yyyy-MM-dd HH:mm:ss.SSSSSS",
                   "yyyy-MM-dd HH:mm:ss,SSS",
                   "yyyy-MM-dd HH:mm:ss",
                   "MMM  d HH:mm:ss",
                   "MMM dd HH:mm:ss",
                   "dd/MMM/yyyy:HH:mm:ss Z",
                   "yyyy-MM-dd HH:mm:ss.SSSZ",
                   "E MMM dd HH:mm:ss yyyy Z",
                   "E MMM dd HH:mm:ss yyyy",
                   "ISO8601"
                 ]
        timezone => "UTC"
      }
      mutate {
        lowercase => [ "loglevel" ]
        remove_tag => [ "beats_input_codec_plain_applied" ]
        remove_field => [ "offset", "count", "input_type", "beat", "logdate", "[fields][tags]" ]
        convert => { "pid" => "integer" }
        rename => { "host" => "hostname" }
        rename => { "logmessage" => "message" }
        rename => { "app" => "[fields][uwsgi][app]" }
        rename => { "managed_requests" => "[fields][uwsgi][managed_requests]" }
        rename => { "total_requests" => "[fields][uwsgi][total_requests]" }
        rename => { "remote_addr" => "[fields][uwsgi][remote_addr]" }
        rename => { "local_addr" => "[fields][uwsgi][local_addr]" }
        rename => { "cgi_vars" => "[fields][uwsgi][cgi_vars]" }
        rename => { "cgi_vars_size" => "[fields][uwsgi][cgi_vars_size]" }
      }
    }
  }
}
